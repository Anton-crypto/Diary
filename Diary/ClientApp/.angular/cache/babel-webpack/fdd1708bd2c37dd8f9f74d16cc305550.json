{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/toni_/OneDrive/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Diary/Diary/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"../store\";\nexport class AuthGuard {\n  constructor(router, http, storeModel) {\n    this.router = router;\n    this.http = http;\n    this.storeModel = storeModel;\n    this.baseUrl = \"\";\n    this.baseUrl = storeModel.getBaseUrl();\n  }\n\n  canActivate(route, state, role = \"user\") {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const token = localStorage.getItem(\"jwt\");\n      const roleUser = localStorage.getItem(\"role\");\n\n      if (token && role == roleUser) {\n        return true;\n      }\n\n      const isRefreshSuccess = yield _this.tryRefreshingTokens(token);\n\n      if (!isRefreshSuccess) {\n        _this.router.navigate([\"\"]);\n      }\n\n      return isRefreshSuccess;\n    })();\n  }\n\n  tryRefreshingTokens(token) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const refreshToken = localStorage.getItem(\"refreshToken\");\n\n      if (!token || !refreshToken) {\n        return false;\n      }\n\n      const credentials = JSON.stringify({\n        accessToken: token,\n        refreshToken: refreshToken\n      });\n      let isRefreshSuccess;\n      const refreshRes = yield new Promise((resolve, reject) => {\n        _this2.http.post(_this2.baseUrl + `/token/refresh`, credentials, {\n          headers: new HttpHeaders({\n            \"Content-Type\": \"application/json\"\n          })\n        }).subscribe({\n          next: res => resolve(res),\n          error: _ => {\n            reject;\n            isRefreshSuccess = false;\n          }\n        });\n      });\n      localStorage.setItem(\"jwt\", refreshRes.token);\n      localStorage.setItem(\"refreshToken\", refreshRes.refreshToken);\n      localStorage.setItem(\"user\", JSON.stringify(refreshRes.user));\n      isRefreshSuccess = true;\n      return isRefreshSuccess;\n    })();\n  }\n\n}\n\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.StoreModel));\n};\n\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/toni_/OneDrive/Рабочий стол/Diary/Diary/ClientApp/src/app/guards/auth.guard.ts"],"names":["HttpHeaders","i0","i1","i2","i3","AuthGuard","constructor","router","http","storeModel","baseUrl","getBaseUrl","canActivate","route","state","role","token","localStorage","getItem","roleUser","isRefreshSuccess","tryRefreshingTokens","navigate","refreshToken","credentials","JSON","stringify","accessToken","refreshRes","Promise","resolve","reject","post","headers","subscribe","next","res","error","_","setItem","user","ɵfac","AuthGuard_Factory","t","ɵɵinject","Router","HttpClient","StoreModel","ɵprov","ɵɵdefineInjectable","factory","providedIn"],"mappings":"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","sourcesContent":["import { HttpHeaders } from '@angular/common/http';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/router\";\r\nimport * as i2 from \"@angular/common/http\";\r\nimport * as i3 from \"../store\";\r\nexport class AuthGuard {\r\n    constructor(router, http, storeModel) {\r\n        this.router = router;\r\n        this.http = http;\r\n        this.storeModel = storeModel;\r\n        this.baseUrl = \"\";\r\n        this.baseUrl = storeModel.getBaseUrl();\r\n    }\r\n    async canActivate(route, state, role = \"user\") {\r\n        const token = localStorage.getItem(\"jwt\");\r\n        const roleUser = localStorage.getItem(\"role\");\r\n        if (token && role == roleUser) {\r\n            return true;\r\n        }\r\n        const isRefreshSuccess = await this.tryRefreshingTokens(token);\r\n        if (!isRefreshSuccess) {\r\n            this.router.navigate([\"\"]);\r\n        }\r\n        return isRefreshSuccess;\r\n    }\r\n    async tryRefreshingTokens(token) {\r\n        const refreshToken = localStorage.getItem(\"refreshToken\");\r\n        if (!token || !refreshToken) {\r\n            return false;\r\n        }\r\n        const credentials = JSON.stringify({ accessToken: token, refreshToken: refreshToken });\r\n        let isRefreshSuccess;\r\n        const refreshRes = await new Promise((resolve, reject) => {\r\n            this.http.post(this.baseUrl + `/token/refresh`, credentials, {\r\n                headers: new HttpHeaders({\r\n                    \"Content-Type\": \"application/json\"\r\n                })\r\n            }).subscribe({\r\n                next: (res) => resolve(res),\r\n                error: (_) => { reject; isRefreshSuccess = false; }\r\n            });\r\n        });\r\n        localStorage.setItem(\"jwt\", refreshRes.token);\r\n        localStorage.setItem(\"refreshToken\", refreshRes.refreshToken);\r\n        localStorage.setItem(\"user\", JSON.stringify(refreshRes.user));\r\n        isRefreshSuccess = true;\r\n        return isRefreshSuccess;\r\n    }\r\n}\r\nAuthGuard.ɵfac = function AuthGuard_Factory(t) { return new (t || AuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.StoreModel)); };\r\nAuthGuard.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthGuard, factory: AuthGuard.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}